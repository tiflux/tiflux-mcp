/**
 * Handlers para opera√ß√µes relacionadas a comunica√ß√µes internas dos tickets
 */

const TiFluxAPI = require('../api/tiflux-api');

class InternalCommunicationsHandlers {
  constructor() {
    this.api = new TiFluxAPI();
  }

  /**
   * Handler para criar uma comunica√ß√£o interna
   */
  async handleCreateInternalCommunication(args) {
    const { ticket_number, text, files = [], files_base64 = [] } = args;

    if (!ticket_number) {
      throw new Error('ticket_number √© obrigat√≥rio');
    }

    if (!text) {
      throw new Error('text √© obrigat√≥rio');
    }

    try {
      // Combinar arquivos locais e base64
      const allFiles = [...files, ...files_base64];

      // Validar n√∫mero total de arquivos
      if (allFiles.length > 10) {
        return {
          content: [
            {
              type: 'text',
              text: `**‚ö†Ô∏è Muitos arquivos**\n\n` +
                    `**Ticket:** #${ticket_number}\n` +
                    `**Arquivos fornecidos:** ${allFiles.length} (${files.length} locais + ${files_base64.length} base64)\n` +
                    `**Limite:** 10 arquivos por comunica√ß√£o\n\n` +
                    `*Remova alguns arquivos e tente novamente.*`
            }
          ]
        };
      }

      // Validar estrutura dos arquivos base64
      if (files_base64.length > 0) {
        for (let i = 0; i < files_base64.length; i++) {
          const file = files_base64[i];

          if (!file || typeof file !== 'object') {
            return {
              content: [
                {
                  type: 'text',
                  text: `**‚ùå Erro de valida√ß√£o no arquivo base64 #${i + 1}**\n\n` +
                        `O arquivo deve ser um objeto com as propriedades "content" e "filename".\n\n` +
                        `**Exemplo correto:**\n` +
                        `\`\`\`json\n` +
                        `{\n` +
                        `  "content": "base64string...",\n` +
                        `  "filename": "documento.pdf"\n` +
                        `}\n` +
                        `\`\`\`\n\n` +
                        `*Verifique a estrutura do arquivo e tente novamente.*`
                }
              ]
            };
          }

          if (!file.content || typeof file.content !== 'string') {
            return {
              content: [
                {
                  type: 'text',
                  text: `**‚ùå Erro de valida√ß√£o no arquivo base64 #${i + 1}**\n\n` +
                        `A propriedade "content" √© obrigat√≥ria e deve ser uma string em base64.\n\n` +
                        `*Verifique o conte√∫do do arquivo e tente novamente.*`
                }
              ]
            };
          }

          if (!file.filename || typeof file.filename !== 'string') {
            return {
              content: [
                {
                  type: 'text',
                  text: `**‚ùå Erro de valida√ß√£o no arquivo base64 #${i + 1}**\n\n` +
                        `A propriedade "filename" √© obrigat√≥ria e deve ser uma string.\n\n` +
                        `*Exemplo: "documento.pdf", "planilha.csv", "imagem.png"*`
                }
              ]
            };
          }

          // Validar tamanho do base64 antes de enviar (aproximado)
          const estimatedSize = Math.ceil((file.content.length * 3) / 4);
          const maxSize = 26214400; // 25MB

          if (estimatedSize > maxSize) {
            return {
              content: [
                {
                  type: 'text',
                  text: `**‚ùå Arquivo base64 muito grande**\n\n` +
                        `**Arquivo:** ${file.filename}\n` +
                        `**Tamanho estimado:** ${Math.round(estimatedSize / 1024 / 1024)}MB\n` +
                        `**Limite:** 25MB\n\n` +
                        `*Reduza o tamanho do arquivo ou envie em m√∫ltiplas comunica√ß√µes.*`
                }
              ]
            };
          }
        }
      }

      // Criar comunica√ß√£o interna via API
      const response = await this.api.createInternalCommunication(ticket_number, text, allFiles);
      
      if (response.error) {
        return {
          content: [
            {
              type: 'text',
              text: `**‚ùå Erro ao criar comunica√ß√£o interna**\n\n` +
                    `**Ticket:** #${ticket_number}\n` +
                    `**C√≥digo:** ${response.status}\n` +
                    `**Mensagem:** ${response.error}\n\n` +
                    `*Verifique se o ticket existe e se voc√™ tem permiss√£o para adicionar comunica√ß√µes internas.*`
            }
          ]
        };
      }

      const communication = response.data;
      
      // Preparar informa√ß√µes sobre arquivos anexados
      let filesInfo = '';
      if (communication.files && communication.files.length > 0) {
        filesInfo = `\n**üìé Arquivos anexados:** ${communication.files_count} arquivo(s)\n`;
        communication.files.forEach((file, index) => {
          const fileSize = file.size ? `(${Math.round(file.size / 1024)}KB)` : '';
          filesInfo += `${index + 1}. **${file.file_name}** ${fileSize}\n`;
        });
      }

      // Formatear texto da comunica√ß√£o (remover HTML se presente)
      const communicationText = communication.text ? 
        communication.text.replace(/<[^>]*>/g, '').substring(0, 200) : 
        'Comunica√ß√£o criada';
      
      return {
        content: [
          {
            type: 'text',
            text: `**‚úÖ Comunica√ß√£o interna criada com sucesso!**\n\n` +
                  `**Ticket:** #${ticket_number}\n` +
                  `**ID da Comunica√ß√£o:** ${communication.id}\n` +
                  `**Autor:** ${communication.user?.name || 'Usu√°rio n√£o informado'}\n` +
                  `**Criada em:** ${communication.created_at}\n` +
                  `**Conte√∫do:** ${communicationText}${communicationText.length >= 200 ? '...' : ''}\n` +
                  `${filesInfo}\n` +
                  `*‚úÖ Comunica√ß√£o interna adicionada via API TiFlux*`
          }
        ]
      };
      
    } catch (error) {
      return {
        content: [
          {
            type: 'text',
            text: `**‚ùå Erro interno ao criar comunica√ß√£o interna**\n\n` +
                  `**Ticket:** #${ticket_number}\n` +
                  `**Erro:** ${error.message}\n\n` +
                  `*Verifique sua conex√£o e configura√ß√µes da API.*`
          }
        ]
      };
    }
  }

  /**
   * Handler para listar comunica√ß√µes internas
   */
  async handleListInternalCommunications(args) {
    const { ticket_number, offset = 1, limit = 20 } = args;
    
    if (!ticket_number) {
      throw new Error('ticket_number √© obrigat√≥rio');
    }

    try {
      // Buscar comunica√ß√µes internas via API
      const response = await this.api.listInternalCommunications(ticket_number, offset, limit);
      
      if (response.error) {
        return {
          content: [
            {
              type: 'text',
              text: `**‚ùå Erro ao listar comunica√ß√µes internas**\n\n` +
                    `**Ticket:** #${ticket_number}\n` +
                    `**C√≥digo:** ${response.status}\n` +
                    `**Mensagem:** ${response.error}\n\n` +
                    `*Verifique se o ticket existe e se voc√™ tem permiss√£o para visualizar comunica√ß√µes internas.*`
            }
          ]
        };
      }

      const communications = response.data || [];
      
      if (communications.length === 0) {
        return {
          content: [
            {
              type: 'text',
              text: `**üìã Nenhuma comunica√ß√£o interna encontrada**\n\n` +
                    `**Ticket:** #${ticket_number}\n` +
                    `**P√°gina:** ${offset}\n\n` +
                    `*Este ticket ainda n√£o possui comunica√ß√µes internas ou voc√™ chegou ao final da lista.*`
            }
          ]
        };
      }

      // Formatar lista de comunica√ß√µes
      let communicationsList = `**üìã Comunica√ß√µes Internas do Ticket #${ticket_number}** (${communications.length} encontradas)\n\n`;
      
      communications.forEach((comm, index) => {
        const commId = comm.id || 'N/A';
        const authorName = comm.user?.name || 'Autor n√£o informado';
        const createdAt = comm.created_at ? 
          new Date(comm.created_at).toLocaleString('pt-BR') : 
          'Data n√£o informada';
        
        // Formatear conte√∫do da comunica√ß√£o (remover HTML e limitar)
        let content = '';
        if (comm.text) {
          content = comm.text.replace(/<[^>]*>/g, '').trim();
          if (content.length > 150) {
            content = content.substring(0, 150) + '...';
          }
        } else {
          content = 'Conte√∫do n√£o dispon√≠vel';
        }

        // Informa√ß√£o sobre arquivos
        let filesInfo = '';
        if (comm.files_count && comm.files_count > 0) {
          filesInfo = ` üìé ${comm.files_count} arquivo(s)`;
        }

        communicationsList += `**${index + 1}. Comunica√ß√£o #${commId}**\n` +
                             `   üë§ **Autor:** ${authorName}\n` +
                             `   üìÖ **Data:** ${createdAt}${filesInfo}\n` +
                             `   üí¨ **Conte√∫do:** ${content}\n\n`;
      });

      // Informa√ß√µes de pagina√ß√£o
      const currentOffset = parseInt(offset) || 1;
      const currentLimit = parseInt(limit) || 20;
      const hasMoreCommunications = communications.length === currentLimit;
      
      let paginationInfo = `**üìä Pagina√ß√£o:**\n`;
      paginationInfo += `‚Ä¢ P√°gina atual: ${currentOffset}\n`;
      paginationInfo += `‚Ä¢ Comunica√ß√µes por p√°gina: ${currentLimit}\n`;
      paginationInfo += `‚Ä¢ Comunica√ß√µes nesta p√°gina: ${communications.length}\n`;
      
      if (hasMoreCommunications) {
        const nextOffset = currentOffset + 1;
        paginationInfo += `‚Ä¢ Pr√≥xima p√°gina: Use \`offset: ${nextOffset}\` para ver mais comunica√ß√µes\n`;
      } else {
        paginationInfo += `‚Ä¢ Esta √© a √∫ltima p√°gina dispon√≠vel\n`;
      }

      return {
        content: [
          {
            type: 'text',
            text: `${communicationsList}${paginationInfo}\n*‚úÖ Dados obtidos da API TiFlux em tempo real*`
          }
        ]
      };
      
    } catch (error) {
      return {
        content: [
          {
            type: 'text',
            text: `**‚ùå Erro interno ao listar comunica√ß√µes internas**\n\n` +
                  `**Ticket:** #${ticket_number}\n` +
                  `**Erro:** ${error.message}\n\n` +
                  `*Verifique sua conex√£o e configura√ß√µes da API.*`
          }
        ]
      };
    }
  }

  /**
   * Handler para obter uma comunica√ß√£o interna espec√≠fica
   */
  async handleGetInternalCommunication(args) {
    const { ticket_number, communication_id } = args;
    
    if (!ticket_number) {
      throw new Error('ticket_number √© obrigat√≥rio');
    }
    
    if (!communication_id) {
      throw new Error('communication_id √© obrigat√≥rio');
    }

    try {
      // Buscar comunica√ß√£o interna espec√≠fica via API
      const response = await this.api.getInternalCommunication(ticket_number, communication_id);
      
      if (response.error) {
        return {
          content: [
            {
              type: 'text',
              text: `**‚ùå Erro ao buscar comunica√ß√£o interna**\n\n` +
                    `**Ticket:** #${ticket_number}\n` +
                    `**Comunica√ß√£o ID:** ${communication_id}\n` +
                    `**C√≥digo:** ${response.status}\n` +
                    `**Mensagem:** ${response.error}\n\n` +
                    `*Verifique se o ticket e a comunica√ß√£o existem e se voc√™ tem permiss√£o para visualizar.*`
            }
          ]
        };
      }

      const communication = response.data;
      
      // Formatear texto da comunica√ß√£o (remover HTML se presente)
      const communicationText = communication.text ? 
        communication.text.replace(/<[^>]*>/g, '').trim() : 
        'Conte√∫do n√£o dispon√≠vel';
      
      return {
        content: [
          {
            type: 'text',
            text: `**üìã Comunica√ß√£o Interna #${communication.id}**\n\n` +
                  `${communicationText}\n\n` +
                  `*‚úÖ Texto completo obtido da API TiFlux*`
          }
        ]
      };
      
    } catch (error) {
      return {
        content: [
          {
            type: 'text',
            text: `**‚ùå Erro interno ao buscar comunica√ß√£o interna**\n\n` +
                  `**Ticket:** #${ticket_number}\n` +
                  `**Comunica√ß√£o ID:** ${communication_id}\n` +
                  `**Erro:** ${error.message}\n\n` +
                  `*Verifique sua conex√£o e configura√ß√µes da API.*`
          }
        ]
      };
    }
  }
}

module.exports = InternalCommunicationsHandlers;
#!/usr/bin/env node

/**
 * Script de teste para as funcionalidades de comunica√ß√µes internas
 */

const TiFluxAPI = require('./src/api/tiflux-api');
const InternalCommunicationsHandlers = require('./src/handlers/internal_communications');

async function testInternalCommunications() {
  console.log('üß™ Testando funcionalidades de comunica√ß√µes internas...\n');
  
  const handlers = new InternalCommunicationsHandlers();
  const testTicketNumber = '1'; // Ticket de teste
  
  try {
    // Teste 1: Listar comunica√ß√µes internas
    console.log('üìã Teste 1: Listar comunica√ß√µes internas do ticket #' + testTicketNumber);
    const listResult = await handlers.handleListInternalCommunications({
      ticket_number: testTicketNumber,
      offset: 1,
      limit: 5
    });
    
    console.log('Resultado:');
    console.log(listResult.content[0].text);
    console.log('\n' + '='.repeat(80) + '\n');
    
    // Teste 2: Criar comunica√ß√£o interna (apenas texto)
    console.log('‚úçÔ∏è Teste 2: Criar comunica√ß√£o interna no ticket #' + testTicketNumber);
    const createResult = await handlers.handleCreateInternalCommunication({
      ticket_number: testTicketNumber,
      text: 'Comunica√ß√£o interna de teste criada via MCP TiFlux - ' + new Date().toISOString()
    });
    
    console.log('Resultado:');
    console.log(createResult.content[0].text);
    console.log('\n' + '='.repeat(80) + '\n');
    
    // Teste 3: Valida√ß√£o de par√¢metros obrigat√≥rios
    console.log('‚ö†Ô∏è Teste 3: Valida√ß√£o - ticket_number obrigat√≥rio');
    try {
      await handlers.handleListInternalCommunications({
        offset: 1,
        limit: 5
      });
    } catch (error) {
      console.log('‚úÖ Valida√ß√£o funcionou:', error.message);
    }
    
    console.log('\n' + '='.repeat(80) + '\n');
    
    // Teste 4: Valida√ß√£o de par√¢metros obrigat√≥rios para cria√ß√£o
    console.log('‚ö†Ô∏è Teste 4: Valida√ß√£o - text obrigat√≥rio na cria√ß√£o');
    try {
      await handlers.handleCreateInternalCommunication({
        ticket_number: testTicketNumber
      });
    } catch (error) {
      console.log('‚úÖ Valida√ß√£o funcionou:', error.message);
    }
    
    console.log('\n' + '='.repeat(80) + '\n');
    
    // Teste 5: Teste de pagina√ß√£o
    console.log('üìÑ Teste 5: Pagina√ß√£o - p√°gina 2');
    const paginationResult = await handlers.handleListInternalCommunications({
      ticket_number: testTicketNumber,
      offset: 2,
      limit: 3
    });
    
    console.log('Resultado:');
    console.log(paginationResult.content[0].text);
    
    console.log('\nüéâ Todos os testes conclu√≠dos!');
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
    process.exit(1);
  }
}

// Verificar vari√°veis de ambiente
if (!process.env.TIFLUX_API_KEY) {
  console.error('‚ùå TIFLUX_API_KEY n√£o configurada');
  console.log('Configure a vari√°vel de ambiente antes de executar os testes:');
  console.log('export TIFLUX_API_KEY="sua_chave_aqui"');
  process.exit(1);
}

// Executar testes
testInternalCommunications().catch(console.error);
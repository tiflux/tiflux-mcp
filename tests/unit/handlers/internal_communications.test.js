/**
 * Testes unit√°rios para InternalCommunicationsHandlers
 * Testes completamente isolados usando mocks - SEM comunica√ß√£o externa
 */

const InternalCommunicationsHandlers = require('../../../src/handlers/internal_communications');
const { MockTiFluxAPI, createMockApiWithError, createMockApiWithConfig } = require('../../helpers/mock-api');

describe('InternalCommunicationsHandlers', () => {
  let handlers;
  let mockApi;

  beforeEach(() => {
    mockApi = new MockTiFluxAPI();
    handlers = new InternalCommunicationsHandlers();
    handlers.api = mockApi; // Injetar mock
  });

  describe('handleCreateInternalCommunication', () => {
    it('deve criar comunica√ß√£o interna com sucesso (apenas texto)', async () => {
      // Arrange
      const args = {
        ticket_number: '123',
        text: 'Comunica√ß√£o interna de teste'
      };

      // Act
      const result = await handlers.handleCreateInternalCommunication(args);

      // Assert
      expect(result.content).toBeDefined();
      expect(result.content[0].type).toBe('text');
      expect(result.content[0].text).toContain('‚úÖ Comunica√ß√£o interna criada com sucesso!');
      expect(result.content[0].text).toContain('**Ticket:** #123');
      expect(result.content[0].text).toContain('Usuario Teste');
      expect(result.content[0].text).toContain('**ID da Comunica√ß√£o:** 2');
    });

    it('deve criar comunica√ß√£o interna com arquivo anexado', async () => {
      // Arrange
      const args = {
        ticket_number: '123',
        text: 'Comunica√ß√£o com arquivo',
        files: ['/path/to/test.png']
      };

      // Act
      const result = await handlers.handleCreateInternalCommunication(args);

      // Assert
      expect(result.content[0].text).toContain('‚úÖ Comunica√ß√£o interna criada com sucesso!');
      expect(result.content[0].text).toContain('üìé Arquivos anexados:** 1 arquivo(s)');
      expect(result.content[0].text).toContain('teste.png');
      expect(result.content[0].text).toContain('**ID da Comunica√ß√£o:** 1');
    });

    it('deve rejeitar quando ticket_number n√£o informado', async () => {
      // Arrange
      const args = { text: 'Teste' };

      // Act & Assert
      await expect(handlers.handleCreateInternalCommunication(args))
        .rejects.toThrow('ticket_number √© obrigat√≥rio');
    });

    it('deve rejeitar quando text n√£o informado', async () => {
      // Arrange
      const args = { ticket_number: '123' };

      // Act & Assert
      await expect(handlers.handleCreateInternalCommunication(args))
        .rejects.toThrow('text √© obrigat√≥rio');
    });

    it('deve tratar erro quando ticket n√£o encontrado', async () => {
      // Arrange
      const args = {
        ticket_number: '999', // Ticket que gera erro no mock
        text: 'Teste'
      };

      // Act
      const result = await handlers.handleCreateInternalCommunication(args);

      // Assert
      expect(result.content[0].text).toContain('‚ùå Erro ao criar comunica√ß√£o interna');
      expect(result.content[0].text).toContain('**Ticket:** #999');
      expect(result.content[0].text).toContain('Ticket n√£o encontrado');
      expect(result.content[0].text).toContain('**C√≥digo:** 404');
    });

    it('deve validar limite de arquivos (m√°ximo 10)', async () => {
      // Arrange
      const args = {
        ticket_number: '123',
        text: 'Teste',
        files: new Array(11).fill('/path/to/file.txt') // 11 arquivos
      };

      // Act
      const result = await handlers.handleCreateInternalCommunication(args);

      // Assert
      expect(result.content[0].text).toContain('‚ö†Ô∏è Muitos arquivos');
      expect(result.content[0].text).toContain('**Arquivos fornecidos:** 11');
      expect(result.content[0].text).toContain('**Limite:** 10 arquivos');
    });

    it('deve tratar erro de arquivo n√£o encontrado', async () => {
      // Arrange
      const args = {
        ticket_number: '123',
        text: 'Teste',
        files: ['/path/inexistente.txt'] // Arquivo que gera erro no mock
      };

      // Act
      const result = await handlers.handleCreateInternalCommunication(args);

      // Assert
      expect(result.content[0].text).toContain('‚ùå Erro ao criar comunica√ß√£o interna');
      expect(result.content[0].text).toContain('Arquivo n√£o encontrado');
    });

    it('deve tratar erro de arquivo muito grande', async () => {
      // Arrange
      const args = {
        ticket_number: '123',
        text: 'Teste',
        files: ['/path/arquivo-grande.zip'] // Arquivo que gera erro no mock
      };

      // Act
      const result = await handlers.handleCreateInternalCommunication(args);

      // Assert
      expect(result.content[0].text).toContain('‚ùå Erro ao criar comunica√ß√£o interna');
      expect(result.content[0].text).toContain('Arquivo muito grande');
    });

    it('deve tratar erro de conex√£o', async () => {
      // Arrange
      handlers.api = createMockApiWithError('connection_error');
      const args = {
        ticket_number: '123',
        text: 'Teste'
      };

      // Act
      const result = await handlers.handleCreateInternalCommunication(args);

      // Assert
      expect(result.content[0].text).toContain('‚ùå Erro ao criar comunica√ß√£o interna');
      expect(result.content[0].text).toContain('Erro de conex√£o');
    });

    it('deve tratar texto HTML corretamente', async () => {
      // Arrange
      const args = {
        ticket_number: '123',
        text: '<div><strong>Comunica√ß√£o</strong> com <em>HTML</em></div>'
      };

      // Act
      const result = await handlers.handleCreateInternalCommunication(args);

      // Assert
      expect(result.content[0].text).toContain('‚úÖ Comunica√ß√£o interna criada com sucesso!');
      expect(result.content[0].text).toContain('**Conte√∫do:** Comunica√ß√£o sem arquivos'); // HTML removido no mock
    });
  });

  describe('handleListInternalCommunications', () => {
    it('deve listar comunica√ß√µes internas com sucesso', async () => {
      // Arrange
      const args = {
        ticket_number: '123',
        offset: 1,
        limit: 20
      };

      // Act
      const result = await handlers.handleListInternalCommunications(args);

      // Assert
      expect(result.content[0].text).toContain('üìã Comunica√ß√µes Internas do Ticket #123');
      expect(result.content[0].text).toContain('2 encontradas');
      expect(result.content[0].text).toContain('**1. Comunica√ß√£o #1**');
      expect(result.content[0].text).toContain('**Autor:** Usuario Teste');
      expect(result.content[0].text).toContain('**2. Comunica√ß√£o #2**');
      expect(result.content[0].text).toContain('**Autor:** Outro Usuario');
      expect(result.content[0].text).toContain('üìé 1 arquivo(s)');
    });

    it('deve rejeitar quando ticket_number n√£o informado', async () => {
      // Arrange
      const args = { offset: 1 };

      // Act & Assert
      await expect(handlers.handleListInternalCommunications(args))
        .rejects.toThrow('ticket_number √© obrigat√≥rio');
    });

    it('deve usar valores padr√£o para pagina√ß√£o quando n√£o informados', async () => {
      // Arrange
      const args = {
        ticket_number: '123'
        // offset e limit n√£o informados - deve usar padr√µes
      };

      // Act
      const result = await handlers.handleListInternalCommunications(args);

      // Assert
      expect(result.content[0].text).toContain('‚Ä¢ P√°gina atual: 1');
      expect(result.content[0].text).toContain('‚Ä¢ Comunica√ß√µes por p√°gina: 20');
    });

    it('deve tratar ticket n√£o encontrado', async () => {
      // Arrange
      const args = {
        ticket_number: '999' // Ticket que gera erro no mock
      };

      // Act
      const result = await handlers.handleListInternalCommunications(args);

      // Assert
      expect(result.content[0].text).toContain('‚ùå Erro ao listar comunica√ß√µes internas');
      expect(result.content[0].text).toContain('**Ticket:** #999');
      expect(result.content[0].text).toContain('Ticket n√£o encontrado');
      expect(result.content[0].text).toContain('**C√≥digo:** 404');
    });

    it('deve mostrar mensagem quando n√£o h√° comunica√ß√µes', async () => {
      // Arrange
      const args = {
        ticket_number: '123',
        offset: 2 // P√°gina 2 retorna vazio no mock
      };

      // Act
      const result = await handlers.handleListInternalCommunications(args);

      // Assert
      expect(result.content[0].text).toContain('üìã Nenhuma comunica√ß√£o interna encontrada');
      expect(result.content[0].text).toContain('**Ticket:** #123');
      expect(result.content[0].text).toContain('**P√°gina:** 2');
    });

    it('deve truncar conte√∫do muito longo', async () => {
      // Arrange
      const args = {
        ticket_number: '123'
      };

      // Act
      const result = await handlers.handleListInternalCommunications(args);

      // Assert
      // A segunda comunica√ß√£o no mock tem texto longo que deve ser truncado
      expect(result.content[0].text).toContain('Segunda comunica√ß√£o com texto muito longo');
      expect(result.content[0].text).toMatch(/Segunda comunica√ß√£o.*\.\.\./);
    });

    it('deve mostrar informa√ß√µes de pagina√ß√£o corretamente', async () => {
      // Arrange
      const args = {
        ticket_number: '123',
        offset: 1,
        limit: 5
      };

      // Act
      const result = await handlers.handleListInternalCommunications(args);

      // Assert
      expect(result.content[0].text).toContain('**üìä Pagina√ß√£o:**');
      expect(result.content[0].text).toContain('‚Ä¢ P√°gina atual: 1');
      expect(result.content[0].text).toContain('‚Ä¢ Comunica√ß√µes por p√°gina: 5');
      expect(result.content[0].text).toContain('‚Ä¢ Comunica√ß√µes nesta p√°gina: 2');
    });

    it('deve tratar erro de conex√£o', async () => {
      // Arrange
      handlers.api = createMockApiWithError('connection_error');
      const args = {
        ticket_number: '123'
      };

      // Act
      const result = await handlers.handleListInternalCommunications(args);

      // Assert
      expect(result.content[0].text).toContain('‚ùå Erro ao listar comunica√ß√µes internas');
      expect(result.content[0].text).toContain('Erro de conex√£o');
    });

    it('deve tratar token inv√°lido', async () => {
      // Arrange
      handlers.api = createMockApiWithError('unauthorized');
      const args = {
        ticket_number: '123'
      };

      // Act
      const result = await handlers.handleListInternalCommunications(args);

      // Assert
      expect(result.content[0].text).toContain('‚ùå Erro ao listar comunica√ß√µes internas');
      expect(result.content[0].text).toContain('Token de API inv√°lido');
      expect(result.content[0].text).toContain('**C√≥digo:** 401');
    });
  });

  describe('Casos extremos e valida√ß√µes', () => {
    it('deve funcionar com API key n√£o configurada', async () => {
      // Arrange
      handlers.api = createMockApiWithConfig({ apiKey: null });
      const args = {
        ticket_number: '123',
        text: 'Teste'
      };

      // Act
      const result = await handlers.handleCreateInternalCommunication(args);

      // Assert
      expect(result.content[0].text).toContain('‚ùå Erro ao criar comunica√ß√£o interna');
      expect(result.content[0].text).toContain('TIFLUX_API_KEY n√£o configurada');
    });

    it('deve lidar com dados ausentes na resposta da API', async () => {
      // Arrange
      const mockApiWithIncompleteData = new MockTiFluxAPI();
      mockApiWithIncompleteData.createInternalCommunication = async () => ({
        data: {
          id: 1,
          // Propositalmente faltando alguns campos
          created_at: '2024-01-01T10:00:00Z'
        }
      });
      handlers.api = mockApiWithIncompleteData;

      const args = {
        ticket_number: '123',
        text: 'Teste'
      };

      // Act
      const result = await handlers.handleCreateInternalCommunication(args);

      // Assert
      expect(result.content[0].text).toContain('‚úÖ Comunica√ß√£o interna criada com sucesso!');
      expect(result.content[0].text).toContain('Usu√°rio n√£o informado');
    });
  });
});
/**
 * Testes unit√°rios para TicketHandlers
 * Exemplos de testes para os handlers existentes
 */

const TicketHandlers = require('../../../src/handlers/tickets');
const { MockTiFluxAPI, createMockApiWithError } = require('../../helpers/mock-api');

describe('TicketHandlers', () => {
  let handlers;
  let mockApi;

  beforeEach(() => {
    mockApi = new MockTiFluxAPI();
    handlers = new TicketHandlers();
    handlers.api = mockApi; // Injetar mock
  });

  describe('handleGetTicket', () => {
    it('deve buscar ticket com sucesso', async () => {
      // Arrange
      const args = { ticket_id: '123' };

      // Act
      const result = await handlers.handleGetTicket(args);

      // Assert
      expect(result.content[0].text).toContain('**Ticket #123**');
      expect(result.content[0].text).toContain('Ticket de teste');
      expect(result.content[0].text).toContain('**Cliente:** Cliente Teste');
      expect(result.content[0].text).toContain('**T√©cnico:** T√©cnico Teste');
    });

    it('deve rejeitar quando ticket_id n√£o informado', async () => {
      // Arrange
      const args = {};

      // Act & Assert
      await expect(handlers.handleGetTicket(args))
        .rejects.toThrow('ticket_id √© obrigat√≥rio');
    });

    it('deve tratar ticket n√£o encontrado', async () => {
      // Arrange
      const args = { ticket_id: '999' };

      // Act
      const result = await handlers.handleGetTicket(args);

      // Assert
      expect(result.content[0].text).toContain('‚ùå Erro ao buscar ticket #999');
      expect(result.content[0].text).toContain('Ticket n√£o encontrado');
    });
  });

  describe('handleCreateTicket', () => {
    it('deve criar ticket com sucesso', async () => {
      // Arrange
      const args = {
        title: 'Novo ticket de teste',
        description: 'Descri√ß√£o do ticket de teste'
      };

      // Act
      const result = await handlers.handleCreateTicket(args);

      // Assert
      expect(result.content[0].text).toContain('‚úÖ Ticket criado com sucesso!');
      expect(result.content[0].text).toContain('**N√∫mero:** #124');
      expect(result.content[0].text).toContain('Novo ticket');
    });

    it('deve rejeitar quando title n√£o informado', async () => {
      // Arrange
      const args = { description: 'Apenas descri√ß√£o' };

      // Act & Assert
      await expect(handlers.handleCreateTicket(args))
        .rejects.toThrow('title e description s√£o obrigat√≥rios');
    });

    it('deve rejeitar quando description n√£o informado', async () => {
      // Arrange
      const args = { title: 'Apenas t√≠tulo' };

      // Act & Assert
      await expect(handlers.handleCreateTicket(args))
        .rejects.toThrow('title e description s√£o obrigat√≥rios');
    });
  });

  describe('handleListTickets', () => {
    it('deve listar tickets com filtro de mesa', async () => {
      // Arrange
      const args = { desk_ids: '1,2' };

      // Act
      const result = await handlers.handleListTickets(args);

      // Assert
      expect(result.content[0].text).toContain('üìã Lista de Tickets');
      expect(result.content[0].text).toContain('2 encontrados');
      expect(result.content[0].text).toContain('Ticket #123');
      expect(result.content[0].text).toContain('Ticket #124');
    });

    it('deve validar filtros obrigat√≥rios', async () => {
      // Arrange
      const args = {}; // Sem filtros

      // Act
      const result = await handlers.handleListTickets(args);

      // Assert
      expect(result.content[0].text).toContain('**‚ö†Ô∏è Filtro obrigat√≥rio n√£o informado**');
      expect(result.content[0].text).toContain('‚Ä¢ **desk_ids**');
      expect(result.content[0].text).toContain('‚Ä¢ **client_ids**');
    });
  });

  describe('Integra√ß√£o com busca de clientes', () => {
    it('deve criar ticket usando client_name', async () => {
      // Arrange
      const args = {
        title: 'Ticket com busca de cliente',
        description: 'Descri√ß√£o',
        client_name: 'Cliente Teste' // Usar nome em vez de ID
      };

      // Act
      const result = await handlers.handleCreateTicket(args);

      // Assert  
      expect(result.content[0].text).toContain('**‚ö†Ô∏è M√∫ltiplos clientes encontrados para "Cliente Teste"**');
    });

    it('deve tratar cliente n√£o encontrado', async () => {
      // Arrange
      const args = {
        title: 'Ticket teste',
        description: 'Descri√ß√£o',
        client_name: 'inexistente' // Cliente que n√£o existe no mock
      };

      // Act
      const result = await handlers.handleCreateTicket(args);

      // Assert
      expect(result.content[0].text).toContain('‚ùå Cliente "inexistente" n√£o encontrado');
    });
  });

  describe('Tratamento de erros', () => {
    it('deve tratar erro de conex√£o', async () => {
      // Arrange
      handlers.api = createMockApiWithError('connection_error');
      const args = { ticket_id: '123' };

      // Act
      const result = await handlers.handleGetTicket(args);

      // Assert
      expect(result.content[0].text).toContain('‚ùå Erro ao buscar ticket #123');
      expect(result.content[0].text).toContain('Erro de conex√£o');
    });

    it('deve tratar timeout', async () => {
      // Arrange
      handlers.api = createMockApiWithError('timeout');
      const args = { ticket_id: '123' };

      // Act
      const result = await handlers.handleGetTicket(args);

      // Assert
      expect(result.content[0].text).toContain('‚ùå Erro ao buscar ticket #123');
      expect(result.content[0].text).toContain('Timeout na requisi√ß√£o');
    });
  });
});